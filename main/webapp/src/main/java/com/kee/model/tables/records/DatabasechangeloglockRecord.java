/**
 * This class is generated by jOOQ
 */
package com.kee.model.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import cn.kee.model.tables.Databasechangeloglock;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "databasechangeloglock", schema = "ewp")
public class DatabasechangeloglockRecord extends UpdatableRecordImpl<DatabasechangeloglockRecord> implements Record4<Integer, Byte, Timestamp, String> {

	private static final long serialVersionUID = -1395421171;

	/**
	 * Setter for <code>ewp.databasechangeloglock.ID</code>.
	 */
	public void setId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>ewp.databasechangeloglock.ID</code>.
	 */
	@Id
	@Column(name = "ID", unique = true, nullable = false, precision = 10)
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>ewp.databasechangeloglock.LOCKED</code>.
	 */
	public void setLocked(Byte value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>ewp.databasechangeloglock.LOCKED</code>.
	 */
	@Column(name = "LOCKED", nullable = false, precision = 3)
	public Byte getLocked() {
		return (Byte) getValue(1);
	}

	/**
	 * Setter for <code>ewp.databasechangeloglock.LOCKGRANTED</code>.
	 */
	public void setLockgranted(Timestamp value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>ewp.databasechangeloglock.LOCKGRANTED</code>.
	 */
	@Column(name = "LOCKGRANTED")
	public Timestamp getLockgranted() {
		return (Timestamp) getValue(2);
	}

	/**
	 * Setter for <code>ewp.databasechangeloglock.LOCKEDBY</code>.
	 */
	public void setLockedby(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>ewp.databasechangeloglock.LOCKEDBY</code>.
	 */
	@Column(name = "LOCKEDBY", length = 255)
	public String getLockedby() {
		return (String) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, Byte, Timestamp, String> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, Byte, Timestamp, String> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Databasechangeloglock.DATABASECHANGELOGLOCK.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Byte> field2() {
		return Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field3() {
		return Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKGRANTED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKEDBY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Byte value2() {
		return getLocked();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value3() {
		return getLockgranted();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getLockedby();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DatabasechangeloglockRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DatabasechangeloglockRecord value2(Byte value) {
		setLocked(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DatabasechangeloglockRecord value3(Timestamp value) {
		setLockgranted(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DatabasechangeloglockRecord value4(String value) {
		setLockedby(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DatabasechangeloglockRecord values(Integer value1, Byte value2, Timestamp value3, String value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached DatabasechangeloglockRecord
	 */
	public DatabasechangeloglockRecord() {
		super(Databasechangeloglock.DATABASECHANGELOGLOCK);
	}

	/**
	 * Create a detached, initialised DatabasechangeloglockRecord
	 */
	public DatabasechangeloglockRecord(Integer id, Byte locked, Timestamp lockgranted, String lockedby) {
		super(Databasechangeloglock.DATABASECHANGELOGLOCK);

		setValue(0, id);
		setValue(1, locked);
		setValue(2, lockgranted);
		setValue(3, lockedby);
	}
}
