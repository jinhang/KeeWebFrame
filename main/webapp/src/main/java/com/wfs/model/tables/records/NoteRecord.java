/**
 * This class is generated by jOOQ
 */
package com.wfs.model.tables.records;


import com.wfs.model.tables.Note;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "note", schema = "ewp")
public class NoteRecord extends UpdatableRecordImpl<NoteRecord> implements Record4<String, String, String, String> {

	private static final long serialVersionUID = 329557267;

	/**
	 * Setter for <code>ewp.note.noteid</code>.
	 */
	public void setNoteid(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>ewp.note.noteid</code>.
	 */
	@Id
	@Column(name = "noteid", unique = true, nullable = false, length = 32)
	public String getNoteid() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>ewp.note.name</code>.
	 */
	public void setName(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>ewp.note.name</code>.
	 */
	@Column(name = "name", length = 32)
	public String getName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>ewp.note.context</code>.
	 */
	public void setContext(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>ewp.note.context</code>.
	 */
	@Column(name = "context", length = 256)
	public String getContext() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>ewp.note.userid</code>.
	 */
	public void setUserid(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>ewp.note.userid</code>.
	 */
	@Column(name = "userid", length = 32)
	public String getUserid() {
		return (String) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<String, String, String, String> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<String, String, String, String> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return Note.NOTE.NOTEID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Note.NOTE.NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Note.NOTE.CONTEXT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Note.NOTE.USERID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getNoteid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getContext();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getUserid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public NoteRecord value1(String value) {
		setNoteid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public NoteRecord value2(String value) {
		setName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public NoteRecord value3(String value) {
		setContext(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public NoteRecord value4(String value) {
		setUserid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public NoteRecord values(String value1, String value2, String value3, String value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached NoteRecord
	 */
	public NoteRecord() {
		super(Note.NOTE);
	}

	/**
	 * Create a detached, initialised NoteRecord
	 */
	public NoteRecord(String noteid, String name, String context, String userid) {
		super(Note.NOTE);

		setValue(0, noteid);
		setValue(1, name);
		setValue(2, context);
		setValue(3, userid);
	}
}
